/* 
 任务名：任务10_2 银行拆迁选址问题
 姓名：宋子豪
 班级：7班
 学号：2017012004
 日期：2018-12-16 
 */
#define INFINITY INT_MAX
#define MAX_VERTEX_NUM 50
#define VRType int
#define InfoType char
#define VertexType int
#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
typedef struct AreCell 
{
	int adj;
	//InfoType *info;
}AreCell, AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];
typedef int PathMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM][MAX_VERTEX_NUM];
typedef int DistancMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];
typedef struct
{
	VertexType vexs[MAX_VERTEX_NUM];
	int person[MAX_VERTEX_NUM];
	AdjMatrix arcs;
	int vexnum, arcnum;
}MGraph;
bool CreateUDG(MGraph *G)//初始化
{
	int i, j;
	G->vexnum = 18;
	G->arcnum = 31;
	G->vexs[0] = 1;G->vexs[1] = 2;G->vexs[2] = 3;G->vexs[3] = 4;G->vexs[4] = 5;G->vexs[5] = 6;
	G->vexs[6] = 7;G->vexs[7] = 8;G->vexs[8] = 9;G->vexs[9] = 10;G->vexs[10] = 11;G->vexs[11] = 12;
	G->vexs[12] = 13;G->vexs[13] = 14;G->vexs[14] = 15;G->vexs[15] = 16;G->vexs[16] = 17;G->vexs[17] = 18;

	G->person[0] = 50;G->person[1] = 45;G->person[2] = 45;G->person[3] = 48;G->person[4] = 40;G->person[5] = 40;
	G->person[6] = 36;G->person[7] = 32;G->person[8] = 32;G->person[9] = 30;G->person[10] = 30;G->person[11] = 36;
	G->person[12] = 25;G->person[13] = 20;G->person[14] = 15;G->person[15] = 20;G->person[16] = 10;G->person[17] = 10;
	for(i = 0; i < G->vexnum; i++)
	{
		for(j = 0; j < G->vexnum; j++)
		{
			G->arcs[i][j].adj = 1000;//代表无穷
		}
	}
	G->arcs[0][0].adj = 0;G->arcs[0][1].adj = 20;G->arcs[0][2].adj = 18;G->arcs[0][3].adj = 18;G->arcs[0][4].adj = 15;
	G->arcs[1][0].adj = 20;G->arcs[1][1].adj = 0;G->arcs[1][2].adj = 26;G->arcs[1][4].adj = 28;G->arcs[1][8].adj = 30;G->arcs[1][9].adj = 28;G->arcs[1][10].adj = 30;G->arcs[1][11].adj = 30;
	G->arcs[2][0].adj = 18;G->arcs[2][1].adj = 26;G->arcs[2][2].adj = 0;G->arcs[2][3].adj = 20;G->arcs[2][11].adj = 20;G->arcs[2][13].adj = 26;
	G->arcs[3][0].adj = 18;G->arcs[3][2].adj = 20;G->arcs[3][3].adj = 0;G->arcs[3][4].adj = 18;G->arcs[3][5].adj = 18;G->arcs[3][6].adj = 50;G->arcs[3][15].adj = 18;
	G->arcs[4][0].adj = 15;G->arcs[4][1].adj = 28;G->arcs[4][3].adj = 18;G->arcs[4][4].adj = 0;G->arcs[4][6].adj = 38;G->arcs[4][7].adj = 32;
	G->arcs[5][3].adj = 18;G->arcs[5][5].adj = 0;G->arcs[5][17].adj = 36;
	G->arcs[6][3].adj = 50;G->arcs[6][4].adj = 38;G->arcs[6][6].adj = 0;G->arcs[6][17].adj = 34;
	G->arcs[7][4].adj = 32;G->arcs[7][7].adj = 0;G->arcs[7][8].adj = 36;
	G->arcs[8][1].adj = 30;G->arcs[8][7].adj = 36;G->arcs[8][8].adj = 0;
	G->arcs[9][1].adj = 28;G->arcs[9][9].adj = 0;G->arcs[9][10].adj = 30;
	G->arcs[10][1].adj = 30;G->arcs[10][9].adj = 30;G->arcs[10][10].adj = 0;G->arcs[10][11].adj = 26;G->arcs[10][12].adj = 32;
	G->arcs[11][1].adj = 30;G->arcs[11][2].adj = 20;G->arcs[11][10].adj = 26;G->arcs[11][11].adj = 0;G->arcs[11][12].adj = 28;
	G->arcs[12][10].adj = 32;G->arcs[12][11].adj = 28;G->arcs[12][12].adj = 0;G->arcs[12][13].adj = 32;
	G->arcs[13][2].adj = 26;G->arcs[13][12].adj = 32;G->arcs[13][13].adj = 0;G->arcs[13][14].adj = 34;
	G->arcs[14][13].adj = 34;G->arcs[14][14].adj = 0;G->arcs[14][15].adj = 24;G->arcs[14][16].adj = 36;
	G->arcs[15][3].adj = 18;G->arcs[15][14].adj = 24;G->arcs[15][15].adj = 0;G->arcs[15][16].adj = 30;
	G->arcs[16][14].adj = 36;G->arcs[16][15].adj = 30;G->arcs[16][16].adj = 0;G->arcs[16][17].adj = 32;
	G->arcs[17][5].adj = 36;G->arcs[17][6].adj = 34;G->arcs[17][16].adj = 32;G->arcs[17][17].adj = 0;

	for(i = 0; i < G->vexnum; i++)//打印初始矩阵
	{
		for(j = 0; j < G->vexnum; j++)
		{
			if(G->arcs[i][j].adj == 1000)
			{
				printf("%5d", G->arcs[i][j].adj);
				continue;
			}
			printf("%5d", G->arcs[i][j].adj);
		}
		printf("\n");
	}
	return true;
}
void print_PathMatrix(MGraph *G, PathMatrix &P) //打印路径矩阵
{
    int i, j, k;
    for(i = 0; i < G->vexnum; i++)//打印顶点
        printf("%3d", G->vexs[i]);
    for(i = 0; i < G->vexnum; i++)//打印路径矩阵
    {
        for(j = 0; j < G->vexnum; j++)
        {
			printf("%d-->%d:", i+1, j+1);
            for(k = 0; k < G->vexnum; k++)
			    printf("%d  ", P[i][j][k]);
			printf("\n");
        }
		
    }
}
int MaxScount(PathMatrix &P, int v, int w)//取最大值
{
	int i, j, k, max1 = 0;
	for(i = 0; i < 18; i++)
	{
		for(j = 0; j < 18; j++)
		{
			if(j == w && i == v)
			{
				for(k = 0; k < 18; k++)
				{
					if(max1 < P[i][j][k])
					{
						max1 = P[i][j][k];
					}	
				}
				break;
			}
		}
		
	}
	return max1;
}
void ShortestPath_FLOYD(MGraph *G, PathMatrix &P, DistancMatrix &D)//FLOYD算法
{
	int v,w,u,i,count,j;
    for(v=0; v<G->vexnum; ++v)
	{
		for(w=0; w<G->vexnum; ++w)
        {
            D[v][w] = G->arcs[v][w].adj;
            for(u=0; u < G->vexnum; ++u)    //初始化
                P[v][w][u] = 0;
            if(D[v][w] < 1000)        //从v到w有直接路径
            {
                P[v][w][v] = 1;        //起点
                P[v][w][w] = 2;        //终点
            }
        }
	}
    for(u=0; u<G->vexnum; ++u)
	{
		for(v=0; v<G->vexnum; ++v)
		{
			for(w=0; w<G->vexnum; ++w)
            {
                if(u==v || v==w || w==u)
                    continue;
                if(D[v][u] + D[u][w]< D[v][w])        //从v经u到w的一条路径更短
                {
                     D[v][w] = D[v][u] + D[u][w];
					 for(i = 0; i < G->vexnum; i++)
					 {
						 P[v][w][i] = P[v][u][i];
					 }
					 count = MaxScount(P, v, w);
					 for(i=0; i<G->vexnum; ++i)
					 {
						 if(P[u][w][i] != 0)
						 {
							 P[v][w][i] = P[u][w][i] + count - 1;//将路径从1开始逐次标出
						 }
					 }
                }
            }
		}
            
	}
}

void print_DistancMatrix(MGraph *G, DistancMatrix &D) //打印距离矩阵
{
	int i;
    for(i = 0; i < G->vexnum; i++) //打印顶点
		printf("%3d",G->vexs[i]);
	printf("\n");
    for(i=0;i<G->vexnum;i++) //打印距离矩阵
    {
        for(int j=0;j<G->vexnum;j++)
        {
			printf("%5d",D[i][j]);
        }
		printf("\n");
    }
}
void Distant(MGraph *G, int *arr, PathMatrix &P, DistancMatrix &D, int a1, int a2, int a3, int a4)
{
	int i, j;
	for(i = 0; i < G->vexnum; i++)//初始化
	{
		arr[i] = 1000;
	}
	for(i = 0; i < G->vexnum; i++)//取到每个银行的最近距离
	{
		for(j = 0; j < G->vexnum; j++)
		{
			if(j == a1 || j == a2 || j == a3 || j == a4 )
			{
				if(arr[i] > D[i][j])
				{
					arr[i] = D[i][j];
				}
			}
		}
	}
}
void CreateMin(int *min)//初始化最短路径数组
{
	int i;
	for(i = 0; i < MAX_VERTEX_NUM; i++)
		min[i] = 0;
}
void MinScount(MGraph *G,PathMatrix &P, int **arr, DistancMatrix &D, int *min)//计算最短路径的距离
{
	int i, j, k;
	for(i = 0; i < 15; i++)
	{
		for(j = 0; j < G->vexnum; j++)
		{
			if(arr[i][j] == 0)
				continue;
			min[i] += arr[i][j] * G->person[j];
		}
	}
}
int CompareMin(int *min1, int *min2, int *min3, int *min4)//比较搬迁一个银行后60条新路径的最小值
{
	int i;
	int min = 20000;
	for(i = 0; i < 15; i++)
	{
		if(min > min1[i])
			min = min1[i];
	}
	for(i = 0; i < 15; i++)
	{
		if(min > min2[i])
			min = min2[i];
	}
	for(i = 0; i < 15; i++)
	{
		if(min > min3[i])
			min = min3[i];
	}
	for(i = 0; i < 15; i++)
	{
		if(min > min4[i])
			min = min4[i];
	}
	return min;
}
int SearchTheMinCount(int min, int *min1, int *min2, int *min3, int *min4)//为最短路径赋值，便于查找所搬迁的银行位置
{
	int i;
	for(i = 0; i < 15; i++)
	{
		if(min == min1[i])
			return 100 + i;
	}
	for(i = 0; i < 15; i++)
	{
		if(min == min2[i])
			return 200 + i;
	}
	for(i = 0; i < 15; i++)
	{
		if(min == min3[i])
			return 300 + i;
	}
	for(i = 0; i < 15; i++)
	{
		if(min == min4[i])
			return 400 + i;
	}
	return 1;
}
void searchBank(int *search, int *bank)//找到最短距离的对应的四个银行位置
{
	if(*search >= 400)
	{
		*search = *search - 400;
		if(*search >= 13)
		{
			bank[0] = 6;
			bank[1] = 13;
			bank[2] = 15;
			bank[3] = *search + 4;
		}
		else if(*search >= 12)
		{
			bank[0] = 6;
			bank[1] = 13;
			bank[2] = *search + 3;
			bank[3] = 15;
		}
		else if(*search >= 5)
		{
			bank[0] = 6;
			bank[1] = *search + 2;
			bank[2] = 13;
			bank[3] = 15;
		}
		else if(*search >= 0)
		{
			bank[0] = *search + 1;
			bank[1] = 6;
			bank[2] = 13;
			bank[3] = 15;
		}
	}
	if(*search >= 300)
	{
		*search = *search - 300;
		if(*search >= 13)
		{
			bank[0] = 2;
			bank[1] = 13;
			bank[2] = 15;
			bank[3] = *search + 4;
		}
		else if(*search >= 12)
		{
			bank[0] = 2;
			bank[1] = 13;
			bank[2] = *search + 3;
			bank[3] = 15;
		}
		else if(*search >= 1)
		{
			bank[0] = 2;
			bank[1] = *search + 2;
			bank[2] = 13;
			bank[3] = 15;
		}
		else if(*search >= 0)
		{
			bank[0] = *search + 1;
			bank[1] = 2;
			bank[2] = 13;
			bank[3] = 15;
		}
	}
	if(*search >= 200)
	{
		*search = *search - 200;
		if(*search >= 13)
		{
			bank[0] = 2;
			bank[1] = 6;
			bank[2] = 15;
			bank[3] = *search + 4;
		}
		else if(*search >= 5)
		{
			bank[0] = 2;
			bank[1] = 6;
			bank[2] = *search + 3;
			bank[3] = 15;
		}
		else if(*search >= 1)
		{
			bank[0] = 2;
			bank[1] = *search + 2;
			bank[2] = 6;
			bank[3] = 15;
		}
		else if(*search >= 0)
		{
			bank[0] = *search + 1;
			bank[1] = 2;
			bank[2] = 6;
			bank[3] = 15;
		}
	}
	if(*search >= 100)
	{
		*search = *search - 100;
		if(*search >= 12)
		{
			bank[0] = 2;
			bank[1] = 6;
			bank[2] = 13;
			bank[3] = *search + 4;
		}
		else if(*search >= 5)
		{
			bank[0] = 2;
			bank[1] = 6;
			bank[2] = *search + 3;
			bank[3] = 13;
		}
		else if(*search >= 1)
		{
			bank[0] = 2;
			bank[1] = *search + 2;
			bank[2] = 6;
			bank[3] = 13;
		}
		else if(*search >= 0)
		{
			bank[0] = *search + 1;
			bank[1] = 2;
			bank[2] = 6;
			bank[3] = 13;
		}
	}
}
void PrintMessage(MGraph *G, int *arr, PathMatrix &P, DistancMatrix &D,int *bank, FILE *p_file)//打印具体信息
{
	int i, j, k, t,k1;
	if(p_file) 
	{
		for(i = 0; i < G->vexnum; i++)
		{
			fprintf(p_file, "V%d 最短距离是：%5d    人数是：%5d  经过的顶点是：",i+1, arr[i], G->person[i]);
			for(j = 0; j < G->vexnum; j++)
			{
				if((j == bank[0]-1 || j == bank[1]-1 || j == bank[2]-1 || j == bank[3]-1) && (arr[i] == D[i][j]))
				{
					t = MaxScount(P,i,j);
					for(k = 2; k <= t; k++)
					{
						for(k1 = 0; k1 < G->vexnum; k1++)
						{
							if(P[i][j][k1] == k)
							{
								fprintf(p_file, "V%d ",k1+1);
								break;
							}
						}
					}
				}
			}
			fprintf(p_file, "\n");
		}
	}
	
}
void sortDistance(MGraph *G, int *arr, PathMatrix &P, DistancMatrix &D, int *bank, FILE *p_file)//搬迁银行
{
	int i, j, k, t, min, search, s1, mins = 0;
	int min1[MAX_VERTEX_NUM], min2[MAX_VERTEX_NUM], min3[MAX_VERTEX_NUM], min4[MAX_VERTEX_NUM];
	int **arr1, **arr2, **arr3, **arr4;
	int arrs[MAX_VERTEX_NUM];
	CreateMin(min1);
	CreateMin(min2);
	CreateMin(min3);
	CreateMin(min4);
	arr1 = (int **)malloc(MAX_VERTEX_NUM *sizeof(int *));
	for(i=0;i<MAX_VERTEX_NUM;i++)
		arr1[i] = (int *)malloc(MAX_VERTEX_NUM *sizeof(int));
	arr2 = (int **)malloc(MAX_VERTEX_NUM *sizeof(int *));
	for(i=0;i<MAX_VERTEX_NUM;i++)
		arr2[i] = (int *)malloc(MAX_VERTEX_NUM *sizeof(int));
	arr3 = (int **)malloc(MAX_VERTEX_NUM *sizeof(int *));
	for(i=0;i<MAX_VERTEX_NUM;i++)
		arr3[i] = (int *)malloc(MAX_VERTEX_NUM *sizeof(int));
	arr4 = (int **)malloc(MAX_VERTEX_NUM *sizeof(int *));
	for(i=0;i<MAX_VERTEX_NUM;i++)
		arr4[i] = (int *)malloc(MAX_VERTEX_NUM *sizeof(int));
	//arr1[2,6,13,n]最短距离,arr2[2,6,n,15]最短距离,arr3[2,n,13,15]最短距离,arr4[n,6,13,15]最短距离
	i = 0;
	for(t = 0; t < G->vexnum; t++)
	{
		if(t == 1 || t ==5 || t ==12)
			continue;
		Distant(G, arr1[i],P,D,1,5,12,t);
		i++;
	}
	i = 0;
	for(t = 0; t < G->vexnum; t++)
	{
		if(t == 1 || t ==5 || t ==14)
			continue;
		Distant(G, arr2[i],P,D,1,5,t,14);
		i++;
	}
	i = 0;
	for(t = 0; t < G->vexnum; t++)
	{
		if(t == 1 || t == 12 || t == 14)
			continue;
		Distant(G, arr3[i],P,D,1,t,12,14);
		i++;
	}
	i = 0;
	for(t = 0; t < G->vexnum; t++)
	{
		if(t == 5 || t == 12 || t == 14)
			continue;
		Distant(G, arr4[i],P,D,t,5,12,14);
		i++;
	}
	/*for(i = 0; i < 15; i++)
	{
		for(j = 0; j < 18; j++)
			printf("%3d", arr1[i][j]);
		printf("\n");
	}*/
	MinScount(G,P, arr1, D, min1);
	MinScount(G,P, arr2, D, min2);
	MinScount(G,P, arr3, D, min3);
	MinScount(G,P, arr4, D, min4);
	min = CompareMin(min1, min2, min3, min4);//最小值
	search = SearchTheMinCount(min, min1, min2, min3, min4);
	s1 = search;
	searchBank(&search, bank);
	Distant(G, arrs, P, D, 1, 5, 12, 14);//原银行地址
	for(j = 0; j < G->vexnum; j++)
	{
		if(arrs[j] == 0)
			continue;
		mins += arrs[j] * G->person[j];
	}
	if(p_file) 
	{
		fprintf(p_file, "修改后站点是：V%d  V%d  V%d  V%d       最短距离总量是：%d 千人*百米\n", bank[0], bank[1], bank[2], bank[3],min);
		printf("原来的站点是：V%d  V%d  V%d  V%d       最短距离总量是：%d 千人*百米\n", 2, 6, 13, 15, mins);
		printf("修改后站点是：V%d  V%d  V%d  V%d       最短距离总量是：%d 千人*百米\n", bank[0], bank[1], bank[2], bank[3],min);
		if(s1 >= 400)
			PrintMessage(G, arr4[search], P, D, bank, p_file);
		else if(s1 >= 300)
			PrintMessage(G, arr3[search], P, D, bank, p_file);
		else if(s1 >= 200)
			PrintMessage(G, arr2[search], P, D, bank, p_file);
		else if(s1 >= 100)
			PrintMessage(G, arr1[search], P, D, bank, p_file);
		fprintf(p_file, "总距离 = 每个地点的人数 * 每个地点距最近站点的距离 = %d 千米*百米\n", min);
		fclose(p_file);
		p_file = NULL;
	}
	
}
int main(void)
{
	MGraph G;
	PathMatrix P;
	DistancMatrix D;
	FILE *p_file = fopen("d:\\搬迁后最短路径.txt", "w");
	int distants[60];
	int bank[4];
	int arr[MAX_VERTEX_NUM];//存放总距离
	CreateUDG(&G);
	ShortestPath_FLOYD(&G, P, D);
	/*print_PathMatrix(&G, P);*/
	/*print_DistancMatrix(&G, D);*/
	sortDistance(&G, arr, P, D, bank, p_file);
	return 0;
}
